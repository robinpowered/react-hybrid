{
  "version": 3,
  "file": "decorateUIRouterViewConfigs.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react-hybrid/decorateUIRouterViewConfigs.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,6BAA+B;AAC/B,6CAAkD;AAElD,yCAAwE;AAExE;;;;;GAKG;AAEH,qBAAY,CAAC,MAAM,CAAC;IAClB,mBAAmB;IACnB,UAAC,MAAgB;QACf,IAAM,OAAO,GAAG,UAAC,IAAgB,EAAE,MAA4B,IAAK,OAAA,IAAI,uBAAe,CAAC,IAAI,EAAE,MAAM,CAAC,EAAjC,CAAiC,CAAC;QAEtG,oDAAoD;QACpD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAEnE,0DAA0D;QAC1D,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE,UAAC,KAAkB,EAAE,eAAe;YAC1E,IAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;YAErC,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YACnD,IAAM,gBAAgB,GAAG,UAAA,GAAG;gBAC1B,OAAA,GAAG,YAAY,KAAK,CAAC,SAAS;oBAC9B,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,gBAAgB,CAAC;oBACxD,CAAC,GAAG,IAAI,GAAG,CAAC,SAAS,IAAI,OAAO,GAAG,CAAC,SAAS,CAAC,MAAM,KAAK,UAAU,CAAC;YAFpE,CAEoE,CAAC;YAEvE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBAC5B,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC;gBAC9C,IAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC;gBAC9D,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC;YAC/D,CAAC,CAAC,CAAC;YAEH,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC",
  "sourcesContent": [
    "import * as React from 'react';\nimport { hybridModule } from './angularjs/module';\nimport { PathNode, StateObject, UIRouter } from '@uirouter/core';\nimport { ReactViewConfig, ReactViewDeclaration } from '@uirouter/react';\n\n/**\n * Registers a `react` view config factory which is invoked when `view.$type === 'react'`.\n *\n * Decorates the `views: {}` registered on states.\n * Detects if a `component:` is a React Component and sets `view.$type = 'react'` if so\n */\n\nhybridModule.config([\n  '$uiRouterProvider',\n  (router: UIRouter) => {\n    const factory = (path: [PathNode], config: ReactViewDeclaration) => new ReactViewConfig(path, config);\n\n    // Add the react view config factory for react views\n    router.viewService._pluginapi._viewConfigFactory('react', factory);\n\n    // Decorate states at registration time with the view type\n    router.stateRegistry.decorator('views', (state: StateObject, parentDecorator) => {\n      const views = parentDecorator(state);\n\n      const self = state.self;\n      const selfViews = self.views || { $default: self };\n      const isReactComponent = cmp =>\n        cmp instanceof React.Component ||\n        (cmp && cmp.prototype && cmp.prototype.isReactComponent) ||\n        (cmp && cmp.prototype && typeof cmp.prototype.render === 'function');\n\n      Object.keys(views).forEach(key => {\n        const view = views[key];\n        const selfView = selfViews[key || '$default'];\n        const reactType = isReactComponent(view.component) && 'react';\n        view.$type = selfViews[key].$type || reactType || view.$type;\n      });\n\n      return views;\n    });\n  },\n]);\n"
  ]
}