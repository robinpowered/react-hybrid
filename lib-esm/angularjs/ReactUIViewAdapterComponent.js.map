{
  "version": 3,
  "file": "ReactUIViewAdapterComponent.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react-hybrid/angularjs/ReactUIViewAdapterComponent.tsx"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { filter } from '@uirouter/core';\nimport { IPortalScope } from '../react/AngularUIView';\nimport { PortalView } from '../react/PortalView';\nimport { ReactUIView } from '../react/ReactUIView';\nimport { hybridModule } from './module';\nimport { debugLog } from '../debug';\n\n// When an angularjs `ui-view` is instantiated, also create an react-ui-view-adapter (which creates a react UIView)\nhybridModule.directive('uiView', function() {\n  return {\n    restrict: 'AE',\n    compile: function(tElem, tAttrs) {\n      let { name, uiView } = tAttrs;\n      name = name || uiView || '$default';\n      debugLog('angularjs', 'ui-view', '?', '.compile()', 'Creating react-ui-view-adapter', tElem);\n      tElem.html(`<react-ui-view-adapter name=\"${name}\"></react-ui-view-adapter>`);\n    },\n  };\n});\n\nvar id = 0;\n\n// This angularjs adapter (inside an angularjs ui-view) creates the react UIView and provides it the correct context\n// It also allows angularjs children created inside the react view (via angular2react or whatever) to access the correct\n// context from the react UIView\nhybridModule.directive('reactUiViewAdapter', function() {\n  return {\n    restrict: 'E',\n    link: function(scope: IPortalScope, elem, attrs) {\n      const debug = (method: string, message: string, ...args) =>\n        debugLog('angularjs', 'react-ui-view-adapter', `${$id}/${attrs.name}`, method, message, ...args);\n\n      const el = elem[0];\n      let _ref = null;\n      let destroyed = false;\n      const $id = id++;\n      const ignoredAttrKeys = ['$$element', '$attr'];\n      attrs = filter(attrs, (val, key) => ignoredAttrKeys.indexOf(key) === -1) as any;\n\n      debug('.link()', 'linking react-ui-view-adapter into ', el, attrs);\n\n      // The UIView ref callback, which is called after the initial render\n      const ref = (ref: HTMLElement) => {\n        // If refs are the same - don't re-render React component.\n        const isSameRef = ref && _ref === ref;\n\n        // If previously there was a ref, and the new `ref` is empty - the component was unmounted.\n        // Leave the unmounted component as it was, and don't try to re-mount it.\n        const isComponentUnmounted = !ref && _ref;\n\n        if (isSameRef || isComponentUnmounted) {\n          return;\n        }\n\n        _ref = ref;\n\n        debug('.ref()', 'Received new React UIView ref', ref);\n\n        // Add the $uiView data to the adapter element to provide context to child angular elements\n        provideContextToAngularJSChildren();\n        renderReactUIView();\n      };\n\n      // The render callback for the React UIView\n      const render = (cmp, props: object) => {\n        debug('.render()', `has ref: ${!!_ref}`);\n\n        provideContextToAngularJSChildren();\n        // Only create the children when the _ref is ready\n        return !_ref ? null : React.createElement(cmp, props);\n      };\n\n      const provideContextToAngularJSChildren = () => {\n        const $cfg = _ref && _ref.uiViewData && _ref.uiViewData.config;\n        const $uiView = _ref && _ref.uiViewAddress;\n\n        debug('.provideContextToAngularJSChildren', '', el, $cfg, $uiView);\n\n        if (!$cfg || !$uiView) {\n          elem.removeData('$uiView');\n        } else {\n          elem.data('$uiView', { $cfg, $uiView });\n        }\n      };\n\n      function renderReactUIView() {\n        if (destroyed) {\n          debug('.renderReactUIView()', `already destroyed -- will not render React UIView`);\n          return;\n        }\n\n        const childUIViewProps = { ...attrs, render, wrap: false, refFn: ref };\n        const portalView: PortalView = scope.$uiRouterReactHybridPortalView;\n\n        if (portalView) {\n          debug('.renderReactUIView()', `will createPortalToChildUIView({ name: '${childUIViewProps['name']}' })`, el);\n          portalView.createPortalToChildUIView($id, { childUIViewProps, portalTarget: el });\n        } else {\n          debug('.renderReactUIView()', `ReactDOM.render(<ReactUIView name=\"${childUIViewProps['name']}\"/>)`, el);\n          ReactDOM.render<any>(<ReactUIView {...childUIViewProps} />, el as any);\n        }\n      }\n\n      scope.$on('$destroy', () => {\n        destroyed = true;\n        const portalView: PortalView = scope.$uiRouterReactHybridPortalView;\n        if (portalView) {\n          portalView.removePortalToChildUIView($id);\n        } else {\n          const unmounted = ReactDOM.unmountComponentAtNode(el);\n          debug('.$on(\"$destroy\")', `unmountComponentAtNode(): ${unmounted}`, el);\n        }\n        // Remove using jQLite element for cross-browser compatibility.\n        elem.remove();\n      });\n\n      renderReactUIView();\n    },\n  };\n});\n"
  ]
}